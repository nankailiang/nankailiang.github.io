(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{564:function(t,s,v){"use strict";v.r(s);var _=v(7),e=Object(_.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("RBAC（Role-Based Access Control）即基于角色的访问控制模型，是一种常用的权限管理模型。在RBAC模型中，授权的访问权限是根据角色进行分配的，而不是直接授权给用户。")]),t._v(" "),v("h2",{attrs:{id:"核心概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),v("ol",[v("li",[t._v("角色（Role）：角色是用户的职能或职责，代表一组相似权限和责任的集合。可以根据组织结构或任务功能定义角色。例如，管理员、编辑员、普通用户等。")]),t._v(" "),v("li",[t._v("权限（Permission）：权限是对系统资源进行操作的权力。每个角色可以被授予不同的权限。例如，读取、写入、删除等。")]),t._v(" "),v("li",[t._v("用户（User）：用户是系统中的实际操作者，通过关联一个或多个角色来获得相应的权限。")]),t._v(" "),v("li",[t._v("角色-权限关系（Role-Permission）：角色与权限之间有一对多的关系。一个角色可以有多个权限，而一个权限也可以被多个角色所拥有。")]),t._v(" "),v("li",[t._v("用户-角色关系（User-Role）：用户与角色之间也有一对多的关系。一个用户可以拥有多个角色，而一个角色可以被多个用户所拥有。")])]),t._v(" "),v("h2",{attrs:{id:"授权过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#授权过程"}},[t._v("#")]),t._v(" 授权过程")]),t._v(" "),v("ol",[v("li",[t._v("管理员定义角色并分配相应的权限。")]),t._v(" "),v("li",[t._v("管理员将角色分配给用户。")]),t._v(" "),v("li",[t._v("用户通过拥有的角色获取相应的权限，从而访问系统中的资源。")])]),t._v(" "),v("h2",{attrs:{id:"优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),v("ul",[v("li",[t._v("简化权限管理：通过将权限授权给角色而不是直接授权给用户，可以简化权限管理的复杂性。当用户的角色或职责发生变化时，只需要调整用户与角色的关系，而不需要逐个调整权限。")]),t._v(" "),v("li",[t._v("提高系统安全性：RBAC模型允许对用户的权限进行精确的控制，降低了误操作和滥用权限的风险。")]),t._v(" "),v("li",[t._v("支持可扩展性：RBAC模型将权限与角色分离，使得系统可以快速适应组织结构的变化或新增功能模块，只需要创建新的角色和分配相应的权限即可。")]),t._v(" "),v("li",[t._v("提升审计能力：通过RBAC模型，可以更好地跟踪和记录系统中角色和权限的使用情况，便于审计和追溯。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);